# -*- coding: utf-8 -*-
"""m22ma004_Pa_5_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ud2JsadTZWC7VBdIZMJN9GTcVgzH0cLP
"""

import torch
import torchvision
import torchvision.transforms as transforms

# Define the transform to normalize the data
transform = transforms.Compose(
    [transforms.Resize((224, 224)),
     transforms.ToTensor(),
     transforms.Normalize((0.5,), (0.5,))])

# Load the training dataset
trainset = torchvision.datasets.EMNIST(root='./data', split='balanced', train=True,
                                        download=True, transform=transform)

# Load the testing dataset
testset = torchvision.datasets.EMNIST(root='./data', split='balanced', train=False,
                                       download=True, transform=transform)

# Create the dataloaders
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)

import torch.nn as nn

class Generator(nn.Module):
    def __init__(self, noise_size=100, image_size=28):
        super(Generator, self).__init__()
        
        # Define the fully-connected layer to map the noise vector to a hidden state
        self.fc = nn.Linear(noise_size, 256 * (image_size // 4) ** 2)
        
        # Define the convolutional layers to upsample the hidden state to a 28x28 image
        self.conv_layers = nn.Sequential(
            nn.BatchNorm2d(256),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(256, 128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Upsample(scale_factor=2),
            nn.Conv2d(128, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64, 0.8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 1, kernel_size=3, padding=1),
            nn.Tanh()
        )
        
    def forward(self, z):
        # Map the noise vector to a hidden state
        out = self.fc(z)
        out = out.view(out.shape[0], 256, (28 // 4), (28 // 4))
        
        # Upsample the hidden state to a 28x28 image
        out = self.conv_layers(out)
        out = out.view(out.shape[0], 1, 28, 28)  # Reshape to batch size x channels x height x width
        return out

import torch.nn as nn
import torchvision.models as models
from google.colab.patches import cv2_imshow
from PIL import Image
from tqdm import tqdm

class Discriminator(nn.Module):
    def __init__(self, input_size, num_classes):
        super(Discriminator, self).__init__()
        self.vgg11 = models.vgg11(pretrained=False)
        self.vgg11.features[0] = nn.Conv2d(1, 64, kernel_size=3, padding=5)
        self.fc1 = nn.Linear(1000, input_size)
        self.fc2 = nn.Linear(input_size, num_classes)
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()
        #self.vgg11.conv1=nn.Conv2d(1, 64, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        #print(x.shape)
        features = self.vgg11(x)
        #x = x.view(x.size(0), -1)
        #print(features.shape)
        out = self.fc1(features)
        #print(out.shape)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.sigmoid(out)
        return out

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
import torch.optim as optim
import numpy as np

# Define the device
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Define the generator and discriminator models
generator = Generator().to(device)
discriminator = Discriminator(input_size=128, num_classes=1).to(device)

# Define the loss function and optimizer for the generator and discriminator
criterion = nn.BCELoss()
lr = 0.0002
betas = (0.5, 0.970)
optimizer_g = optim.Adam(generator.parameters(), lr=lr, betas=betas)
optimizer_d = optim.Adam(discriminator.parameters(), lr=lr, betas=betas)

# Define the batch size and number of epochs
batch_size = 64
num_epochs = 10

# Define the transform to normalize the data
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5,), (0.5,))])

# Load the training dataset
trainset = torchvision.datasets.EMNIST(root='./data', split='balanced', train=True,
                                        download=True, transform=transform)

# Create the dataloader
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True)

# Define the noise vector for generating fake images
noise_dim = 100



# Train the GAN
for epoch in range(num_epochs):
    for i, data in tqdm(enumerate(trainloader, 0)):
        # Train the discriminator
        discriminator.zero_grad()
        real_images, _ = data
        real_images = real_images.to(device)
        batch_size = real_images.size(0)
        labels_real = torch.ones(batch_size, 1).to(device)
        labels_fake = torch.zeros(batch_size, 1).to(device)
        


        
        # Train the discriminator on real images
        
             
        # print(real_images.shape)
        outputs = discriminator(real_images)
        
        loss_real = criterion(outputs, labels_real)

        # Train the discriminator on fake images
        noise = torch.randn(batch_size, noise_dim).to(device)
        fake_images = generator(noise)
        # print(fake_images.shape)
        outputs = discriminator(fake_images.detach())
        loss_fake = criterion(outputs, labels_fake)

        # Backpropagate and optimize the discriminator
        loss_d = loss_real + loss_fake
        loss_d.backward()
        optimizer_d.step()

        # Train the generator
        generator.zero_grad()
        noise = torch.randn(batch_size, noise_dim).to(device)
        fake_images = generator(noise)
        outputs = discriminator(fake_images)
        loss_g = criterion(outputs, labels_real)

        # Backpropagate and optimize the generator
        loss_g.backward()
        optimizer_g.step()

    # Print the loss and save the generated images
    print('[%d/%d] Loss_D: %.4f Loss_G: %.4f' % (epoch + 1, num_epochs, loss_d.item(), loss_g.item()))
    with torch.no_grad():
        noise = torch.randn(64, noise_dim).to(device)
        generated_images = generator(noise).cpu().detach().numpy()
        generated_images = np.transpose(generated_images, (0, 2, 3, 1))
        generated_images = 0.5 * generated_images + 0.5
        #torchvision.utils.save_image(torch.from_numpy(generated_images), 'gan_emnist_epoch%d.png' % (epoch+1))